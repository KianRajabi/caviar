"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toObj = toObj;
exports.objForEach = objForEach;
exports.objClone = objClone;
exports.objFilter = objFilter;
exports.objMap = objMap;
exports.objSome = objSome;
exports.objEvery = objEvery;
exports.objFind = objFind;
exports.objFindKey = objFindKey;

var _typeUtil = require("./typeUtil");

var _arrayUtil = require("./arrayUtil");

/**
 * 转化为对象
 * @param obj
 * @returns {{}}
 */
function toObj(obj) {
  return (0, _typeUtil.isObj)(obj) ? obj : {};
}
/**
 * 遍历
 * @param obj
 * @param func
 */


function objForEach(obj, func) {
  Object.keys(obj).forEach(function (key) {
    func(obj[key], key, obj);
  });
}
/**
 * 克隆
 * @param obj
 * @param keys
 * @returns {{}}
 */


function objClone() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.keys(obj);
  return (0, _arrayUtil.aryToObject)(keys, function (item) {
    return item;
  }, function (item) {
    return obj[item];
  });
}
/**
 * 过滤
 * @param obj
 * @param func
 * @returns {*}
 */


function objFilter(obj, func) {
  var keys = Object.keys(obj);
  var filterKeys = keys.filter(function (key) {
    return func(obj[key], key, obj);
  });
  return objClone(obj, filterKeys);
}
/**
 * 返回对应结果
 * @param obj
 * @param func
 * @returns {{}}
 */


function objMap(obj, func) {
  return (0, _arrayUtil.aryToObject)(Object.keys(obj), function (item) {
    return item;
  }, function (item) {
    return func(obj[item], item, obj);
  });
}
/**
 * 存在判断
 * @param obj
 * @param func
 * @returns {boolean}
 */


function objSome(obj, func) {
  return Object.keys(obj).some(function (key) {
    return func(obj[key], key, obj);
  });
}
/**
 * 所有判断
 * @param obj
 * @param func
 * @returns {boolean}
 */


function objEvery(obj, func) {
  return Object.keys(obj).every(function (key) {
    return func(obj[key], key, obj);
  });
}
/**
 * 找到指定值
 * @param obj
 * @param func
 * @returns {*}
 */


function objFind(obj, func) {
  return obj[objFindKey(obj, func)];
}
/**
 * 找到指定键
 * @param obj
 * @param func
 * @returns {string}
 */


function objFindKey(obj, func) {
  return Object.keys(obj).find(function (key) {
    return func(obj[key], key, obj);
  });
}