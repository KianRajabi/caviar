"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;
exports.toAry = toAry;
exports.aryToObj = aryToObj;
exports.aryToObject = aryToObject;
exports.aryRemove = aryRemove;
exports.aryClassify = aryClassify;
exports.aryRemoveRepeat = aryRemoveRepeat;
exports.aryFilterDef = aryFilterDef;
exports.aryFindChild = aryFindChild;
exports.aryFindChildren = aryFindChildren;

var _typeUtil = require("./typeUtil");

var _validateUtil = require("./validateUtil");

var _defineUtil = require("./defineUtil");

/**
 * 转化为数组
 * @param ary
 * @returns {*}
 */
function toArray(ary) {
  return (0, _typeUtil.isAry)(ary) ? ary : (0, _typeUtil.isDef)(ary) ? [ary] : [];
}
/**
 * 转化为数组
 * @param ary
 * @returns {*}
 */


function toAry(ary) {
  return toArray(ary);
}
/**
 * 数组转对象
 * @param args
 */


function aryToObj() {
  return aryToObject.apply(void 0, arguments);
}
/**
 * 数组转对象
 * @param ary
 * @param key
 * @param valueFunc
 */


function aryToObject(ary, key, valueFunc) {
  (0, _validateUtil.validateArray)(ary);
  var result = {};
  var keyFunc = (0, _defineUtil.defineFunc)(key, function (item) {
    return item[key];
  });
  valueFunc = (0, _defineUtil.defineFunc)(valueFunc, function (item) {
    return item;
  });
  ary.forEach(function (item, i) {
    result[keyFunc(item, i, ary)] = valueFunc(item, i, ary);
  });
  return result;
}
/**
 * 数组删除元素
 * @param ary
 * @param func
 */


function aryRemove(ary, func) {
  (0, _validateUtil.validateArray)(ary);

  if ((0, _typeUtil.isFunc)(func)) {
    for (var i = 0; i < ary.length; i++) {
      var item = ary[i];

      if (func(item, i, ary)) {
        ary.splice(i, 1);
        i--;
      }
    }
  } else {
    var index = ary.indexOf(func);

    if (index !== -1) {
      ary.splice(index, 1);
    }
  }
}
/**
 * 数组分类
 * @param ary
 * @param keyFunc
 * @param valueFunc
 */


function aryClassify(ary) {
  var keyFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'type';
  var valueFunc = arguments.length > 2 ? arguments[2] : undefined;
  (0, _validateUtil.validateArray)(ary);
  var result = {};
  keyFunc = (0, _defineUtil.defineFunc)(keyFunc, function (item) {
    return item[keyFunc];
  });
  valueFunc = (0, _defineUtil.defineFunc)(valueFunc, function (item) {
    return item;
  });
  ary.forEach(function (item, i) {
    var key = keyFunc(item, i, ary);
    var value = valueFunc(item, i, ary);
    var list = result[key] || [];
    list.push(value);
    result[key] = list;
  });
  return result;
}
/**
 * 删除重复项
 * @param ary
 * @param fn
 * @returns {any[]}
 */


function aryRemoveRepeat(ary, fn) {
  (0, _validateUtil.validateArray)(ary);

  if (!fn) {
    return Array.from(new Set(ary));
  }

  var temp = [];
  return ary.filter(function (item, index) {
    var value = fn(item, index, ary);

    if (temp.includes(value)) {
      return false;
    }

    temp.push(value);
    return true;
  });
}
/**
 * 过滤空值
 * @param ary
 * @returns {*}
 */


function aryFilterDef(ary) {
  (0, _validateUtil.validateArray)(ary);
  return ary.filter(function (item) {
    return (0, _typeUtil.isDef)(item);
  });
}
/**
 * 找到指定节点
 * @param ary
 * @param func
 * @param childrenField
 * @param parent
 * @returns {number | * | undefined|*}
 */


function aryFindChild(ary, func) {
  var childrenField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  (0, _validateUtil.validateArray)(ary);
  func = (0, _defineUtil.defineFunc)(func, function (item) {
    return item === func;
  });

  for (var i = 0; i < ary.length; i++) {
    var item = ary[i];

    if (func(item, parent)) {
      return item;
    }

    var children = item[childrenField] || [];
    var childrenResult = children.length && aryFindChild(children, func, childrenField, item);

    if (childrenResult) {
      return childrenResult;
    }
  }
}
/**
 * 寻找所有匹配子节点
 * @param ary
 * @param func
 * @param childrenField
 * @param parent
 * @returns {Array}
 */


function aryFindChildren(ary, func) {
  var childrenField = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';
  var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  (0, _validateUtil.validateArray)(ary);
  func = (0, _defineUtil.defineFunc)(func, function (item) {
    return item === func;
  });
  return ary.map(function (item) {
    var list = func(item, parent) ? [item] : [];
    var children = item[childrenField] || [];
    var childrenResult = children.length && aryFindChildren(children, func, childrenField, item);
    return childrenResult ? list.concat(childrenResult) : list;
  }).reduce(function (pv, item) {
    return pv.concat(item);
  }, []);
}