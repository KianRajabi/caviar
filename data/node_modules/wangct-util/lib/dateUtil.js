"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dateFormat = dateFormat;
exports.diffDays = diffDays;
exports.diffMonths = diffMonths;
exports.diffYears = diffYears;
exports.diffHours = diffHours;
exports.diffMinutes = diffMinutes;
exports.diffSeconds = diffSeconds;

var _typeUtil = require("./typeUtil");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * 日期格式化
 * @param args
 * @returns {string}
 */
function dateFormat() {
  var _formatArgs = formatArgs.apply(void 0, arguments),
      _formatArgs2 = _slicedToArray(_formatArgs, 2),
      date = _formatArgs2[0],
      _formatArgs2$ = _formatArgs2[1],
      format = _formatArgs2$ === void 0 ? 'YYYY-MM-DD hh:mm:ss' : _formatArgs2$;

  var config = {
    Y: date.getFullYear(),
    M: date.getMonth() + 1,
    D: date.getDate(),
    h: date.getHours(),
    m: date.getMinutes(),
    s: date.getSeconds()
  };
  var result = format;
  Object.keys(config).forEach(function (key) {
    result = result.replace(new RegExp("".concat(key, "+"), 'g'), function (match) {
      var value = config[key] + '';
      return value.padStart(match.length, '0');
    });
  });
  return result;
}
/**
 * 差异天数
 * @param date
 * @param num
 * @returns {Date}
 */


function diffDays(date, num) {
  return diff('Date', date, num);
}
/**
 * 差异月份
 * @param date
 * @param num
 * @returns {Date}
 */


function diffMonths(date, num) {
  return diff('Month', date, num);
}
/**
 * 差异年份
 * @param date
 * @param num
 * @returns {Date}
 */


function diffYears(date, num) {
  return diff('FullYear', date, num);
}
/**
 * 差异小时
 * @param date
 * @param num
 * @returns {Date}
 */


function diffHours(date, num) {
  return diff('Hours', date, num);
}
/**
 * 差异分钟
 * @param date
 * @param num
 * @returns {Date}
 */


function diffMinutes(date, num) {
  return diff('Minutes', date, num);
}
/**
 * 差异秒数
 * @param date
 * @param num
 * @returns {Date}
 */


function diffSeconds(date, num) {
  return diff('Seconds', date, num);
}
/**
 * 差异方法
 * @param type
 * @param args
 * @returns {Date}
 */


function diff(type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var _formatArgs3 = formatArgs.apply(void 0, args),
      _formatArgs4 = _slicedToArray(_formatArgs3, 2),
      date = _formatArgs4[0],
      num = _formatArgs4[1];

  var typeAry = ['FullYear', 'Date', 'Month', 'Hours', 'Minutes', 'Seconds'];
  var targetDate = new Date(date);

  if (typeAry.indexOf(type) !== -1) {
    targetDate["set".concat(type)](targetDate["get".concat(type)]() + num);
  }

  return targetDate;
}
/**
 * 格式化参数
 * @param args
 * @returns {*[]}
 */


function formatArgs() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  var ary = Array.from(args);

  if (!(0, _typeUtil.isDate)(ary[0])) {
    ary.unshift(new Date());
  }

  return ary;
}