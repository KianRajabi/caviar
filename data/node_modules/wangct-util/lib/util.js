"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callFunc = callFunc;
exports.equal = equal;
exports.onceQueue = onceQueue;
exports.classNames = classNames;
exports.getQsParams = getQsParams;
exports.getQsString = getQsString;
exports.cookie = cookie;
exports.cloneFunc = cloneFunc;
exports.extend = extend;
exports.scroll = scroll;
exports.random = random;
exports.loop = loop;
exports.pathJoin = pathJoin;
exports.strEqual = strEqual;
exports.catchError = catchError;
exports.setConfig = setConfig;
exports.getConfig = getConfig;
exports.once = once;
exports.clearOnce = clearOnce;
exports.stopPropagation = stopPropagation;
exports.preventDefault = preventDefault;
exports.Cache = exports.Queue = void 0;

var _typeUtil = require("./typeUtil");

var _arrayUtil = require("./arrayUtil");

var _stringUtil = require("./stringUtil");

var _promiseUtil = require("./promiseUtil");

var _objectUtil = require("./objectUtil");

var _options = require("./options");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * 调用函数，过滤错误
 * @param func
 * @param ary
 * @returns {*}
 */
function callFunc(func) {
  if ((0, _typeUtil.isFunc)(func)) {
    for (var _len = arguments.length, ary = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      ary[_key - 1] = arguments[_key];
    }

    return func.call.apply(func, [this].concat(ary));
  }
}
/**
 * 判断对象值相等
 * @param self
 * @param other
 * @returns {boolean}
 */


function equal(self, other) {
  if (_typeof(self) === 'object' && _typeof(other) === 'object' && (0, _typeUtil.isDef)(self) && (0, _typeUtil.isDef)(other)) {
    var keys = Object.keys(self);
    return keys.length === Object.keys(other).length && keys.every(function (key) {
      return self[key] === other[key];
    });
  } else {
    return self === other;
  }
}
/**
 * 一次队列
 * @param options
 * @returns {Promise<any>}
 */


function onceQueue(options) {
  return new Promise(function (cb) {
    new Queue(_objectSpread({}, options, {
      success: cb
    }));
  });
}
/**
 * 队列执行，根据数组按顺序执行
 * @param opt       配置项有：       list execFunc limit success
 * @constructor
 */


var Queue = /*#__PURE__*/function () {
  function Queue(options) {
    _classCallCheck(this, Queue);

    this.config = {
      limit: 1,
      interval: 10,
      list: [],
      result: []
    };
    this.runCount = 0;
    this.sucResult = [];
    this.errResult = [];
    this.setConfig(options);
    this.start();
  }

  _createClass(Queue, [{
    key: "setConfig",
    value: function setConfig(config) {
      this.config = _objectSpread({}, this.config, {}, config);
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      return this.config;
    }
  }, {
    key: "start",
    value: function start() {
      var _this = this;

      var _this$getConfig = this.getConfig(),
          limit = _this$getConfig.limit;

      loop(Math.max(limit - this.runCount, 0), function () {
        setTimeout(function () {
          _this.execItem();
        }, 0);
      });
      this.runCount = limit;
    }
  }, {
    key: "execItem",
    value: function execItem() {
      var _this2 = this;

      var config = this.getConfig();
      var getItem = config.getItem;
      var item = (0, _typeUtil.isFunc)(getItem) ? getItem.call(this) : config.list.shift();

      if ((0, _typeUtil.isUndef)(item)) {
        this.runCount--;

        if (this.runCount === 0) {
          callFunc(config.success, this.sucResult, this.errResult, this);
          this.sucResult = [];
          this.errResult = [];
        }
      } else {
        var pro = (0, _promiseUtil.toPromise)(callFunc.call(this, config.func, item));
        pro["finally"](function () {
          setTimeout(function () {
            _this2.execItem();
          }, config.interval);
        }).then(function (data) {
          return _this2.sucResult.push(data);
        })["catch"](function (err) {
          return _this2.errResult.push(err);
        });
      }
    }
  }]);

  return Queue;
}();
/**
 * 缓存
 */


exports.Queue = Queue;

var Cache = /*#__PURE__*/function () {
  _createClass(Cache, null, [{
    key: "newItem",
    value: function newItem(key, value) {
      return {
        key: key,
        value: value,
        time: +new Date()
      };
    }
  }]);

  function Cache(options) {
    _classCallCheck(this, Cache);

    this.config = {
      limit: 1000
    };
    this.data = {};
    this.setConfig(options);
  }

  _createClass(Cache, [{
    key: "setConfig",
    value: function setConfig(config) {
      this.config = _objectSpread({}, this.config, {}, config);
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      return this.config;
    }
  }, {
    key: "check",
    value: function check() {
      var data = this.data;
      var keys = Object.keys(data);

      if (keys.length > this.getConfig().limit) {
        var deleteKey = keys.sort(function (a, b) {
          return data[a].time - data[b].time;
        })[0];
        delete data[deleteKey];
      }
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      var item = this.data[key];
      return item && item.value;
    }
  }, {
    key: "setItem",
    value: function setItem(key, value) {
      this.data[key] = Cache.newItem(key, value);
      this.check();
      return this;
    }
  }]);

  return Cache;
}();
/**
 * 合并class名称
 * @param args
 * @returns {string}
 */


exports.Cache = Cache;

function classNames() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return args.filter(function (item) {
    return (0, _typeUtil.isStr)(item);
  }).join(' ');
}
/**
 * 获取地址参数（对象格式）
 */


function getQsParams() {
  return (0, _stringUtil.strParse)(window.location.search.substr(1));
}
/**
 * 转化参数为地址参数
 * @param params
 * @param originParams
 */


function getQsString(params) {
  var originParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (0, _stringUtil.stringify)(_objectSpread({}, originParams, {}, params));
}
/**
 * cookie操作
 * @param key
 * @param value
 * @param options
 * @returns {*}
 */


function cookie(key, value) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if ((0, _typeUtil.isDef)(value)) {
    window.document.cookie = key + '=' + value + ';' + (0, _stringUtil.stringify)(options, '=', ';');
  } else {
    var _cookie = (0, _stringUtil.strParse)(window.document.cookie, '=', ';');

    return (0, _typeUtil.isDef)(key) ? _cookie[key] : _cookie;
  }
}
/**
 * 克隆方法
 * @param v
 * @returns {never}
 */


function cloneFunc(v) {
  return new Function('return ' + v.toString())();
}
/**
 * 继承
 * @param deep
 * @param args
 * @returns {*}
 */


function extend(deep) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  if (!(0, _typeUtil.isBol)(deep)) {
    args.unshift(deep);
    deep = false;
  }

  var target = args[0];
  (0, _arrayUtil.aryFilterDef)(args.slice(1)).forEach(function (item) {
    (0, _objectUtil.objForEach)(item, function (value, key) {
      if (deep) {
        if ((0, _typeUtil.isFunc)(value)) {
          value = cloneFunc(value);
        } else if ((0, _typeUtil.isObj)(value)) {
          value = extend(deep, {}, value);
        } else if ((0, _typeUtil.isAry)(value)) {
          value = extend(deep, [], value);
        }
      }

      target[key] = value;
    });
  });
  return target;
}
/**
 * 界面滚动高度
 * @param num
 */


function scroll(num) {
  window.document.documentElement.scrollTop = num;
}
/**
 * 获取随机字符串
 * @param length
 * @returns {string}
 */


function random(length) {
  if ((0, _typeUtil.isUndef)(length)) {
    var preStr = Math.random().toString().substr(3);
    return parseInt(preStr).toString(36);
  }

  return loop(length, function () {
    return getRandomChar();
  }).join('');
}
/**
 * 获取随机字符
 * @returns {*}
 */


function getRandomChar() {
  var chars = getRandomChars();
  return chars[Math.floor(Math.random() * chars.length)];
}
/**
 * 获取随机字符串列表
 */


function getRandomChars() {
  var chars = getConfig(_options.Fields.random);

  if (!chars) {
    chars = [];
    var mapData = {
      '0': 10,
      'aA': 26
    };
    (0, _objectUtil.objForEach)(mapData, function (value, key) {
      key.split('').forEach(function (_char) {
        var baseCode = _char.charCodeAt(0);

        loop(value, function (item, index) {
          chars.push(String.fromCharCode(baseCode + index));
        });
      });
    });
    setConfig(_options.Fields.random, chars);
  }

  return chars;
}
/**
 * 循环次数
 * @param count
 * @param func
 */


function loop() {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var func = arguments.length > 1 ? arguments[1] : undefined;
  return new Array(count).fill(true).map(function (item, i) {
    return callFunc(func, i);
  });
}
/**
 * 路径合并
 * @param args
 * @returns {string}
 */


function pathJoin() {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return args.join('/').replace(/\/+/g, '/');
}
/**
 * 字符串对等比较
 * @param first
 * @param second
 * @returns {boolean}
 */


function strEqual(first, second) {
  return first + '' === second + '';
}
/**
 * 捕捉错误
 * @param func
 * @param defaultValue
 * @returns {*}
 */


function catchError(func, defaultValue) {
  var result = defaultValue;

  try {
    result = func();
  } catch (e) {
    console.error('已捕捉：', e);
    console.log('使用默认值：', defaultValue);
  }

  return result;
}

var _config = {};
/**
 * 设置配置
 * @param key
 * @param value
 */

function setConfig(key, value) {
  if ((0, _typeUtil.isUndef)(value)) {
    _config = key;
  } else {
    _config[key] = value;
  }
}
/**
 * 获取配置
 * @param key
 * @returns {*}
 */


function getConfig(key) {
  return (0, _typeUtil.isUndef)(key) ? _config : _config[key];
}
/**
 * 只调用一次方法
 * @param type
 * @param func
 * @returns {*}
 */


function once(type, func) {
  var data = getConfig(type);

  if (!data) {
    data = {
      value: func()
    };
    setConfig(type, data);
  }

  return data.value;
}
/**
 * 清除一次调用的缓存
 * @param type
 */


function clearOnce(type) {
  setConfig(type, null);
}
/**
 * 取消冒泡
 * @param e
 * @returns {(() => void) | void}
 */


function stopPropagation(e) {
  return e.stopPropagation && e.stopPropagation();
}
/**
 * 取消默认事件
 * @param e
 * @returns {(() => void) | void}
 */


function preventDefault(e) {
  return e.preventDefault && e.preventDefault();
}