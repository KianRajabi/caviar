"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;
exports.validateDate = validateDate;
exports.validateDef = validateDef;
exports.validatePromise = validatePromise;
exports.validateArray = validateArray;
exports.validateObject = validateObject;
exports.validateString = validateString;
exports.validateNumber = validateNumber;
exports.validateFunc = validateFunc;
exports.validateRegExp = validateRegExp;

var _typeUtil = require("./typeUtil");

/**
 * 校验变量格式
 * @param func
 * @param message
 */
function validate(func) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '数据格式不对';
  var isValid = (0, _typeUtil.isFunc)(func) ? func() : func;

  if (!isValid) {
    throw message;
  }
}
/**
 * 校验日期对象
 * @param data
 * @param message
 */


function validateDate(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：日期对象';
  validate((0, _typeUtil.isDate)(data), message);
}

function validateDef(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：不为null或者undefined';
  validate((0, _typeUtil.isDef)(data), message);
}

function validatePromise(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：Promise对象';
  validate((0, _typeUtil.isPromise)(data), message);
}

function validateArray(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：数组';
  validate((0, _typeUtil.isAry)(data), message);
}

function validateObject(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：对象';
  validate((0, _typeUtil.isObj)(data), message);
}

function validateString(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：字符串';
  validate((0, _typeUtil.isStr)(data), message);
}

function validateNumber(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：数字';
  validate((0, _typeUtil.isNum)(data), message);
}

function validateFunc(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：函数';
  validate((0, _typeUtil.isFunc)(data), message);
}

function validateRegExp(data) {
  var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '格式要求：正则对象';
  validate((0, _typeUtil.isRegExp)(data), message);
}