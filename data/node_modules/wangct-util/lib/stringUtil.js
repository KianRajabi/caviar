"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toStr = toStr;
exports.decodeHtml = decodeHtml;
exports.strParse = strParse;
exports.stringify = stringify;

var _defineUtil = require("./defineUtil");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * 转化为字符串
 * @param str
 * @returns {string}
 */
function toStr(str) {
  return (0, _defineUtil.defineValue)(str, '') + '';
}
/**
 * 解析html字符串
 * @param str
 * @returns {string}
 */


function decodeHtml() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var config = {
    amp: '&',
    apos: '\'',
    lt: '<',
    gt: '>',
    quot: '"',
    nbsp: '\xa0',
    middot: '·',
    rdquo: '”',
    ldquo: '“',
    mdash: '—',
    deg: '°',
    bull: '•',
    auml: 'ä',
    sup1: '¹',
    eacute: 'é',
    ccedil: 'ç',
    frac34: '¾',
    egrave: 'è',
    acute: '´',
    sect: '§',
    raquo: '»',
    aelig: 'æ',
    iexcl: '¡',
    yen: '¥',
    aring: 'å',
    curren: '¤',
    copy: '©',
    iuml: 'ï',
    frac14: '¼',
    ordm: 'º',
    not: '¬',
    iquest: '¿',
    cedil: '¸',
    pound: '£',
    reg: '®',
    shy: '­',
    sup3: '³',
    macr: '¯',
    plusmn: '±',
    laquo: '«',
    frac12: '½',
    sup2: '²',
    brvbar: '¦',
    cent: '¢',
    para: '¶',
    ordf: 'ª'
  };
  var re = /&([a-z0-9]+);/ig;
  var newStr = str.replace(re, function (match, matchKey) {
    var key = matchKey.toLowerCase();
    return config[key] ? config[key] : match;
  });
  return newStr === str ? newStr : decodeHtml(newStr);
}
/**
 * 字符串解析
 * @param str
 * @param equalSep
 * @param linkSep
 */


function strParse() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var equalSep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '=';
  var linkSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '&';
  var result = {};
  str.split(linkSep).forEach(function (item) {
    var _item$split = item.split(equalSep),
        _item$split2 = _slicedToArray(_item$split, 2),
        _item$split2$ = _item$split2[0],
        key = _item$split2$ === void 0 ? '' : _item$split2$,
        _item$split2$2 = _item$split2[1],
        value = _item$split2$2 === void 0 ? '' : _item$split2$2;

    if (key && value) {
      result[key.trim()] = decodeURIComponent(value.trim());
    }
  });
  return result;
}
/**
 * 对象字符串
 * @param data
 * @param equalSep
 * @param linkSep
 * @returns {string}
 */


function stringify(data) {
  var equalSep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '=';
  var linkSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '&';
  return Object.keys(data).filter(function (key) {
    return data[key] !== undefined;
  }).map(function (key) {
    return "".concat(key).concat(equalSep).concat(data[key]);
  }).join(linkSep);
}